//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use clap::ValueEnum;
use sea_orm::{Iterable, entity::prelude::*};
use serde::{Deserialize, Deserializer, Serialize};
use strum_macros::EnumString;
use utoipa::ToSchema;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, ToSchema, Serialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique, indexed)]
    pub name: String,
    pub role: UserRole,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

#[derive(
    EnumIter,
    EnumString,
    DeriveActiveEnum,
    utoipa::ToSchema,
    Copy,
    Clone,
    PartialEq,
    PartialOrd,
    Eq,
    Ord,
    ValueEnum,
    Debug,
    Serialize,
)]
#[sea_orm(rs_type = "u32", db_type = "Integer")]
pub enum UserRole {
    /// Administrator role, highest level of access
    Administrator = 100,
    /// Developer role, medium level of access
    Developer = 50,
    /// Reporter role, read-only access
    Reporter = 20,
}

impl UserRole {
    /// Create a UserRole from an integer value
    pub fn from_level(level: i32) -> Option<Self> {
        match level {
            x if x == UserRole::Administrator as i32 => Some(UserRole::Administrator),
            x if x == UserRole::Developer as i32 => Some(UserRole::Developer),
            x if x == UserRole::Reporter as i32 => Some(UserRole::Reporter),
            _ => None,
        }
    }

    /// Get the lowest user role
    pub fn min() -> Self {
        UserRole::iter().min().unwrap()
    }

    /// Get the highest user role
    pub fn max() -> Self {
        UserRole::iter().max().unwrap()
    }
}

// Custom deserializer using FromStr (provided by strum)
impl<'de> Deserialize<'de> for UserRole {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        UserRole::from_str(&s, true).map_err(serde::de::Error::custom)
    }
}
